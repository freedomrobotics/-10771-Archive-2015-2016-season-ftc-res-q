import org.apache.tools.ant.taskdefs.condition.Os

//http://tools.android.com/tech-docs/new-build-system/user-guide
apply plugin: 'com.android.application'

android {
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 19
    }
    lintOptions {
        abortOnError false
    }
    compileSdkVersion 'Google Inc.:Google APIs:19'
    buildToolsVersion '21.1.2'

    //This is bad practice out in the real world
    signingConfigs {
        release {
            storeFile file("key/packagekey.jks")
            storePassword "freedomrobotics"
            keyAlias "FTC_TEAM_10771_KEY"
            keyPassword "freedomrobotics"
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    //http://ph0b.com/android-studio-gradle-and-ndk-integration/
    sourceSets.main {
        jniLibs.srcDir 'src/main/libs'
        jni.srcDirs = [] //disable automatic ndk-build call
    }


    def ndkDir = android.ndkDirectory.getAbsolutePath()

    // call regular ndk-build(.cmd) script from app directory
    task ndkBuild(type: Exec) {
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            commandLine ndkDir + '\\ndk-build.cmd', '-C', file('src/main').absolutePath
        } else {
            commandLine ndkDir + '/ndk-build', '-C', file('src/main').absolutePath
        }
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }
}

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.0'
        //classpath "com.android.tools.build:gradle-experimental:0.6.0-alpha5"
        classpath "net.saliman:gradle-cobertura-plugin:2.3.0"
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

allprojects {
    repositories {
        jcenter()
        flatDir {
            dirs 'out'
        }
    }
}

dependencies {
    compile files('libs/android-support-v4.jar')
    compile(name: 'RobotCore-release', ext: 'aar')
    compile(name: 'Hardware-release', ext: 'aar')
    compile(name: 'FtcCommon-release', ext: 'aar')
    compile(name: 'ModernRobotics-release', ext: 'aar')
    compile(name: 'Analytics-release', ext: 'aar')
    compile(name: 'WirelessP2p-release', ext: 'aar')
    compile files('libs/snakeyaml-1.17-SNAPSHOT-android.jar')
}

apply plugin: 'cobertura'
cobertura {
    coverageReportDir = file('shippable/codecoverage')
    coverageFormats = ['xml']
}